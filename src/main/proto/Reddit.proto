syntax = "proto3";

package reddit;

import "User.proto";
import "Post.proto";
import "Comment.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service RedditService {
  // Create a Post
  rpc CreatePost(CreatePostRequest) returns (Post);

  // Upvote or Downvote a Post
  rpc VotePost(VotePostRequest) returns (Post);

  // Retrieve Post Content
  rpc GetPost(GetPostRequest) returns (Post);

  // Create a Comment
  rpc CreateComment(CreateCommentRequest) returns (Comment);

  // Upvote or Downvote a Comment
  rpc VoteComment(VoteCommentRequest) returns (Comment);

  // Retrieve a list of N most upvoted comments under a post
  rpc GetTopComments(GetTopCommentsRequest) returns (TopCommentsResponse);

  // Expand a comment branch
  rpc ExpandCommentBranch(ExpandCommentBranchRequest) returns (CommentBranchResponse);

  // Monitor updates (Extra Credit)
  // rpc MonitorUpdates(MonitorUpdatesRequest) returns (stream UpdateResponse);
}

// Request and Response messages

message CreatePostRequest {
  string title = 1;
  string text = 2;
  oneof media {
    string video_url = 3;
    string image_url = 4;
  }
  // Other fields as necessary
}

message VotePostRequest {
  string post_id = 1;
  bool upvote = 2; // true for upvote, false for downvote
}

message GetPostRequest {
  string post_id = 1;
}

message CreateCommentRequest {
  string comment_id = 1;
  string post_id = 2;
  string parent_comment_id = 3;
  string text = 4;
  string author = 5;
}

message VoteCommentRequest {
  string comment_id = 1;
  bool upvote = 2; // true for upvote, false for downvote
}

message GetTopCommentsRequest {
  string post_id = 1;
  int32 n = 2; // Number of top comments to retrieve
}

message TopCommentsResponse {
  repeated Comment comments = 1;
  // Additional fields as necessary
}

message ExpandCommentBranchRequest {
  string comment_id = 1;
  int32 n = 2; // Number of comments to expand in the branch
}

message CommentBranchResponse {
  repeated Comment comments = 1;
  // Additional fields as necessary
}

// message MonitorUpdatesRequest {
//   string post_id = 1;
//   repeated string comment_ids = 2;
// }

// message UpdateResponse {
//   string id = 1; // Post or Comment ID
//   int32 new_score = 2;
//   // Additional fields as necessary
// }
